---
import { Image } from 'astro:assets';

interface Project {
  title: string;
  image: string;
  link: string;
  description: string;
  height?: 'tall' | 'normal';
}

const projects: Project[] = [
  {
    title: 'Dhan Yojana',
    image: '/dhan-yojana-logo.png',
    link: 'https://project1.com',
    description: 'AUTOMATED TRADING PLATFORM',
    height: 'tall',
    year: 2024,
  },
  {
    title: 'African Price',
    image: '/african-price.png',
    link: 'https://project2.com',
    description: 'Q&A PLATFORM',
    height: 'normal',
    year: 2021,
  },
  {
    title: 'PlotChart',
    image: '/backtest.png',
    link: 'https://project3.com',
    description: 'TRADING ANALYTICS PLATFORM',
    height: 'normal',
    year: 2024,
  },
  {
    title: 'Amazeing',
    image: '/maze.png',
    link: 'https://project4.com',
    description: 'DSA MAZE GAME',
    height: 'tall',
    year: 2020,
  },
];
---

<section id="projects" class="projects-section">
  <div class="projects-container">
    <h2 class="section-title"><span>Projects</span></h2>
    <div class="masonry-grid">
      {
        projects.map((project, index) => (
          <div class={`masonry-item item-${index}`}>
            <div class="project-card-wrapper">
              <div class={`project-card ${project.height === 'tall' ? 'card-tall' : ''}`}>
                <div class="blue-reveal" />
                <div class="project-image">
                  <Image
                    src={project.image}
                    alt={project.title}
                    width={600}
                    height={project.height === 'tall' ? 600 : 400}
                  />
                </div>
                <div class="project-overlay">
                  <span>{project.year}</span>
                  <div>
                    <h3>{project.title}</h3>
                    <p>{project.description}</p>
                  </div>
                  <a href={project.link}>SEE THE PROJECT</a>
                </div>
                <div class="animated-border" />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .projects-section {
    min-height: 100vh;
    padding: 6rem 2rem;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .projects-container {
    max-width: 1200px;
    width: 100%;
    position: relative;
    z-index: 2;
  }

  .section-title {
    font-size: 2.5rem;
    margin-bottom: 3rem;
    text-align: center;
    color: var(--accent);
    font-family: 'Butler';
    font-weight: 800;
  }

  .section-title span {
    position: relative;
  }

  .section-title span::after {
    content: '';
    position: absolute;
    bottom: 3px;
    left: 0px;
    width: 120%;
    height: 10px;
    background: var(--underline);
    transform: skewX(-30deg);
  }

  .masonry-grid {
    column-count: 1;
    column-gap: 2rem;
    width: 100%;
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 5rem;
  }

  .item-0,
  .item-1 {
    margin-right: 2.5rem;
  }

  @media (min-width: 768px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  .project-card-wrapper {
    perspective: 1000px;
    transform-style: preserve-3d;
    width: 100%;
    display: inline-block;
  }

  .project-card {
    position: relative;
    width: 100%;
    height: 300px;
    overflow: hidden;
    border-radius: 8px;
    transform-style: preserve-3d;
    transition: all 0.3s ease;
    background: var(--bg-primary);
    will-change: transform;
  }

  .card-tall {
    height: 600px;
  }

  .blue-reveal {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background-color: var(--accent);
    z-index: 2;
    opacity: 0;
  }

  .project-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .project-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(10, 25, 47, 0.65);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 3;
    cursor: default;
  }

  .project-overlay div {
    position: absolute;
    text-align: center;
  }

  .project-overlay h3 {
    font-family: 'Butler';
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 0;
    font-size: 2.5rem;
  }

  .project-overlay span {
    color: var(--bg-primary);
    justify-self: flex-start;
    display: block;
    position: absolute;
    top: 20px;
    font-size: 0.75rem;
  }

  .project-overlay p {
    color: var(--bg-primary);
    margin-top: 5px;
    font-size: 0.85rem;
    font-family: 'Butler';
  }

  .project-overlay a {
    color: var(--bg-primary);
    text-decoration: none;
    font-size: 0.75rem;
    position: absolute;
    bottom: 20px;
    cursor: pointer;
  }

  .animated-border {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border: 0 solid var(--accent);
    z-index: 4;
    pointer-events: none;
  }

  .project-card.in-view .blue-reveal {
    animation: revealAndShrink 1.2s ease-in-out forwards;
  }

  .project-card:hover .project-overlay {
    opacity: 1;
  }

  .project-card:hover .animated-border {
    animation: borderGrow 0.4s ease-out forwards;
  }

  @keyframes revealAndShrink {
    0% {
      left: -100%;
      opacity: 1;
    }
    50% {
      left: 0;
      opacity: 1;
      transform: scaleX(1);
    }
    100% {
      left: 0;
      opacity: 1;
      transform: scaleX(0);
      transform-origin: right;
    }
  }

  @keyframes borderGrow {
    0% {
      border-width: 0;
    }
    100% {
      border-width: 12px;
    }
  }
</style>

<script>
  let options = {
    root: null,
    rootMargin: '0px',
    threshold: 0.2,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('in-view');
      }
    });
  }, options);

  function applyTiltEffect(card: HTMLElement, e: MouseEvent) {
    const rect = card.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const centerX = rect.width / 2;
    const centerY = rect.height / 2;

    const rotateX = ((y - centerY) / centerY) * 10;
    const rotateY = ((x - centerX) / centerX) * 10;

    card.style.transform = `perspective(1000px) rotateX(${-rotateX}deg) rotateY(${rotateY}deg) scale3d(1.05, 1.05, 1.05)`;
  }

  function resetTilt(card: HTMLElement) {
    card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
  }

  function initializeCards() {
    const cards = document.querySelectorAll('.project-card');

    cards.forEach((card) => {
      // Intersection Observer
      observer.observe(card);

      // Tilt effect
      card.addEventListener('mousemove', (e) => {
        applyTiltEffect(card as HTMLElement, e);
      });

      card.addEventListener('mouseleave', () => {
        resetTilt(card as HTMLElement);
      });
    });
  }

  document.addEventListener('astro:page-load', initializeCards);

  if (document.readyState === 'complete') {
    initializeCards();
  } else {
    document.addEventListener('DOMContentLoaded', initializeCards);
  }
</script>
