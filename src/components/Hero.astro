---

---

<section class="hero">
  <div id="tsparticles"></div>
  <div class="hero-content">
    <div class="name-container">
      <div class="welcome">
        <img src="/plants.png" alt="Plants" />
        <p>Welcome to my portfolio!</p>
      </div>
      <img src="/name.svg" alt="Name" class="name-svg animate-fade-in" />
      <h1>
        <a
          href=""
          class="typewrite"
          data-period="2000"
          data-type='[ "Backend Engineer", "Fullstack Developer", "DevOps Consultant", "Trading Algo Developer" ]'
        >
          <span class="wrap"></span>
        </a>
      </h1>
    </div>
    <div class="avatar-container">
      <div class="avatar-circle animate-circle">
        <div class="avatar-wrapper animate-rise">
          <img src="/avatar-resize.svg" alt="Avatar" class="avatar-svg" />
        </div>
      </div>
    </div>
  </div>

  <div class="scroll-indicator">
    <div class="mouse">
      <div class="wheel"></div>
    </div>
    <div class="arrow"></div>
  </div>
</section>

<style>
  #tsparticles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
  }

  .hero {
    position: relative;
    width: 100%;
    height: 100vh;
    overflow: hidden;
  }

  .animated-background {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    height: 100%;
    gap: 2rem;
    padding: 0 2rem;
  }

  .name-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    margin-top: 150px;
    margin-right: -110px;
    z-index: 100;
  }

  .name-container .welcome {
    position: absolute;
    top: 50px;
    left: 70px;
  }

  .welcome img {
    width: 300px;
  }

  .welcome p {
    color: var(--text);
    text-align: center;
  }

  .name-container h1 {
    margin-top: 2.5rem;
  }

  .name-container .typewrite {
    text-decoration: none;
    font-family: 'Butler';
    color: var(--text);
  }

  .avatar-container {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .name-svg {
    max-width: 100%;
    height: auto;
    object-fit: contain;
    opacity: 0;
  }

  .scroll-indicator {
    position: absolute;
    bottom: 5rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 3;
    opacity: 0;
    animation: fadeIn 1s ease-out 0.5s forwards;
  }

  .mouse {
    width: 26px;
    height: 42px;
    border: 2px solid var(--text);
    border-radius: 13px;
    position: relative;
  }

  .wheel {
    width: 4px;
    height: 8px;
    background: var(--text);
    position: absolute;
    top: 6px;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 2px;
    animation: mouseWheel 1.5s infinite;
  }

  .arrow {
    width: 10px;
    height: 10px;
    border-right: 2px solid var(--text);
    border-bottom: 2px solid var(--text);
    transform: rotate(45deg);
    margin: 0 auto;
    margin-top: 8px;
    animation: arrowBounce 1.5s infinite;
  }

  @keyframes mouseWheel {
    0% {
      transform: translate(-50%, 0);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, 10px);
      opacity: 0;
    }
  }

  @keyframes arrowBounce {
    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateY(0) rotate(45deg);
    }
    40% {
      transform: translateY(-8px) rotate(45deg);
    }
    60% {
      transform: translateY(-4px) rotate(45deg);
    }
  }

  .avatar-circle {
    width: 600px;
    height: 600px;
    border-radius: 50%;
    background: rgba(249, 167, 126, 0.3);
    position: relative;
    opacity: 0;
    transform: scale(0);
  }

  .avatar-wrapper {
    position: absolute;
    width: 130%;
    height: 130%;
    opacity: 0;
    transition: opacity 0.3s ease-in;
    top: -17%;
    left: 100%;
  }

  .avatar-svg {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  /* Animation classes */
  .animate-circle {
    animation: circleAppear 1s ease-out;
    animation-delay: 3s;
    animation-fill-mode: forwards;
  }

  .animate-rise {
    animation: avatarRise 1.5s ease-out;
    animation-delay: 4s;
    animation-fill-mode: forwards;
  }

  .animate-fade-in {
    animation: fadeIn 1s ease-out;
    animation-delay: 3s;
    animation-fill-mode: forwards;
  }

  @keyframes circleAppear {
    0% {
      transform: scale(0);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes avatarRise {
    0% {
      left: 100%;
    }
    100% {
      left: -8%;
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(-20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .hero-content {
      flex-direction: column;
      gap: 1rem;
    }

    .name-container,
    .avatar-container {
      width: 100%;
    }

    .avatar-circle {
      width: 300px;
      height: 300px;
    }

    .scroll-indicator {
      bottom: 1rem;
    }

    .mouse {
      width: 20px;
      height: 32px;
    }

    .wheel {
      width: 3px;
      height: 6px;
    }

    .arrow {
      width: 8px;
      height: 8px;
    }
  }
</style>

<script>
  class TxtType {
    constructor(el, toRotate, period) {
      this.toRotate = toRotate;
      this.el = el;
      this.loopNum = 0;
      this.period = parseInt(period, 10) || 2000;
      this.txt = '';
      this.isDeleting = false;
      this.tick();
    }

    tick() {
      const i = this.loopNum % this.toRotate.length;
      const fullTxt = this.toRotate[i];

      this.txt = this.isDeleting
        ? fullTxt.substring(0, this.txt.length - 1)
        : fullTxt.substring(0, this.txt.length + 1);

      this.el.innerHTML = `<span class="wrap" style="font-size: 2rem">${this.txt}</span>`;

      let delta = 200 - Math.random() * 100;

      if (this.isDeleting) {
        delta /= 2;
      }

      if (!this.isDeleting && this.txt === fullTxt) {
        delta = this.period;
        this.isDeleting = true;
      } else if (this.isDeleting && this.txt === '') {
        this.isDeleting = false;
        this.loopNum++;
        delta = 500;
      }

      setTimeout(() => this.tick(), delta);
    }
  }

  window.onload = () => {
    tsParticles.load('tsparticles', {
      particles: {
        number: {
          value: 40,
          density: {
            enable: true,
            value_area: 800,
          },
        },
        color: {
          value: [
            '#fa4a2d',
            '#f1fa8c',
            '#ff6347',
            '#00bfff',
            '#6a5acd',
            '#ffae42',
            '#98fb98',
            '#d3d3d3',
            '#ffd1dc',
            '#b2e7e8',
          ],
        },
        shape: {
          type: 'circle',
        },
        opacity: {
          value: 0.8,
          random: true,
          animation: {
            enable: true,
            speed: 1,
            minimumValue: 0.1,
            sync: false,
          },
        },
        size: {
          value: 5,
          random: true,
          animation: {
            enable: true,
            speed: 2,
            minimumValue: 0.1,
            sync: false,
          },
        },
        move: {
          enable: true,
          speed: 1.5,
          direction: 'none',
          random: true,
          straight: false,
          outModes: {
            default: 'out',
          },
        },
      },
      interactivity: {
        detectsOn: 'canvas',
        events: {
          onHover: {
            enable: true,
            mode: 'bubble',
          },
          onClick: {
            enable: true,
            mode: 'push',
          },
          resize: true,
        },
        modes: {
          bubble: {
            distance: 150,
            size: 8,
            duration: 2,
            opacity: 0.8,
            speed: 3,
          },
          push: {
            quantity: 4,
          },
        },
      },
      detectRetina: true,
    });

    const elements = document.getElementsByClassName('typewrite');
    Array.from(elements).forEach((element) => {
      const toRotate = element.getAttribute('data-type');
      const period = element.getAttribute('data-period');
      if (toRotate) {
        new TxtType(element, JSON.parse(toRotate), period);
      }
    });

    const css = document.createElement('style');
    css.type = 'text/css';
    css.innerHTML = '.typewrite > .wrap { border-right: 0.08em solid #fff }';
    document.body.appendChild(css);

    setTimeout(() => {
      const avatarWrapper = document.getElementsByClassName('avatar-wrapper')[0];
      avatarWrapper.style.opacity = 1;
    }, 4000);
  };
</script>
